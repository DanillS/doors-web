import { NextResponse } from 'next/server'
import { supabase } from '../../../../lib/supabase'

export async function POST(request) {
  try {
    const body = await request.json()
    const { operation, percentage, category = 'all' } = body

    console.log('üîÑ Mass price update started:', { operation, percentage })

    if (!operation || !percentage || percentage <= 0) {
      return NextResponse.json({ 
        success: false, 
        error: '–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø–µ—Ä–∞—Ü–∏–∏' 
      }, { status: 400 })
    }

    // 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–≤–µ—Ä–∏ –∏–∑ –±–∞–∑—ã
    let query = supabase.from('Door').select('*')
    const { data: doors, error: fetchError } = await query

    if (fetchError) {
      console.error('‚ùå Error fetching doors:', fetchError)
      return NextResponse.json({ success: false, error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö' }, { status: 500 })
    }

    if (!doors || doors.length === 0) {
      return NextResponse.json({ 
        success: false, 
        message: '–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è' 
      }, { status: 404 })
    }

    // 2. –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    let updatedCount = 0
    let errors = []

    for (const door of doors) {
      // –í–ê–ñ–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º base_price –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤!
      const basePrice = door.base_price || door.price
      let newPrice

      if (operation === 'increase') {
        newPrice = basePrice * (1 + percentage / 100)
      } else if (operation === 'decrease') {
        newPrice = basePrice * (1 - percentage / 100)
      } else {
        return NextResponse.json({ success: false, error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è' }, { status: 400 })
      }

      // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª
      newPrice = Math.round(newPrice)

      // 3. –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ price, base_price –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–µ–∏–∑–º–µ–Ω–Ω–æ–π!
      const { error: updateError } = await supabase
        .from('Door')
        .update({ price: newPrice })
        .eq('id', door.id)

      if (updateError) {
        errors.push(updateError)
      } else {
        updatedCount++
      }
    }

    if (errors.length > 0) {
      console.error('‚ùå Some updates failed:', errors.length)
      return NextResponse.json({ 
        success: false, 
        error: `–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å ${errors.length} —Ç–æ–≤–∞—Ä–æ–≤` 
      }, { status: 500 })
    }

    console.log(`‚úÖ Updated ${updatedCount} doors in Supabase`)
    
    return NextResponse.json({
      success: true,
      message: `–¶–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è ${updatedCount} —Ç–æ–≤–∞—Ä–æ–≤`,
      updatedCount: updatedCount,
      operation,
      percentage,
      note: '–ü—Ä–æ—Ü–µ–Ω—Ç—ã —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –±–∞–∑–æ–≤–æ–π —Ü–µ–Ω—ã'
    })

  } catch (error) {
    console.error('‚ùå Error updating prices:', error)
    return NextResponse.json({ 
      success: false, 
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    }, { status: 500 })
  }
}
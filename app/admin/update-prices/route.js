import { NextResponse } from 'next/server'
import { supabase } from '../../../lib/supabase'

export async function POST(request) {
  try {
    const { operation, percentage, category = 'all' } = await request.json()

    console.log('üîÑ Mass price update:', { operation, percentage, category })

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–≤–µ—Ä–∏
    let query = supabase.from('Door').select('*')
    
    if (category !== 'all') {
      query = query.eq('category', category)
    }

    const { data: doors, error } = await query

    if (error) {
      console.error('‚ùå Supabase error:', error)
      throw error
    }

    if (!doors || doors.length === 0) {
      return NextResponse.json({ 
        success: false, 
        message: '–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è' 
      }, { status: 404 })
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã
    const updatePromises = doors.map(door => {
      const oldPrice = door.price
      let newPrice

      if (operation === 'increase') {
        newPrice = oldPrice * (1 + percentage / 100)
      } else if (operation === 'decrease') {
        newPrice = oldPrice * (1 - percentage / 100)
      } else {
        throw new Error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è')
      }

      // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª
      newPrice = Math.round(newPrice)

      return supabase
        .from('Door')
        .update({ price: newPrice })
        .eq('id', door.id)
    })

    // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const results = await Promise.all(updatePromises)
    const errors = results.filter(result => result.error)

    if (errors.length > 0) {
      console.error('‚ùå Some updates failed:', errors)
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å ${errors.length} —Ç–æ–≤–∞—Ä–æ–≤`)
    }

    console.log(`‚úÖ Updated ${doors.length} doors`)
    
    return NextResponse.json({
      success: true,
      message: `–¶–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è ${doors.length} —Ç–æ–≤–∞—Ä–æ–≤`,
      updatedCount: doors.length,
      operation,
      percentage
    })

  } catch (error) {
    console.error('‚ùå Error updating prices:', error)
    return NextResponse.json({ 
      success: false, 
      error: error.message 
    }, { status: 500 })
  }
}